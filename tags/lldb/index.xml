<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LLDB on Po-Yao&#39;s blog</title>
    <link>http://poyaoc97.github.io/tags/lldb/</link>
    <description>Recent content in LLDB on Po-Yao&#39;s blog</description>
    <generator>Hugo -- 0.139.4</generator>
    <language>en</language>
    <lastBuildDate>Fri, 07 Jan 2022 00:00:00 +0800</lastBuildDate>
    <atom:link href="http://poyaoc97.github.io/tags/lldb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Bug Strikes Back: LLDB Bugs Lurking for Over a Decade</title>
      <link>http://poyaoc97.github.io/posts/2022-01-07-lldb/</link>
      <pubDate>Fri, 07 Jan 2022 00:00:00 +0800</pubDate>
      <guid>http://poyaoc97.github.io/posts/2022-01-07-lldb/</guid>
      <description>&lt;h2 id=&#34;the-issue&#34;&gt;The Issue&lt;/h2&gt;
&lt;p&gt;One day, I was wondering how dynamic function call works.
I thought I&amp;rsquo;d start with a simple &lt;code&gt;puts&lt;/code&gt; call like in this C snippet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) { &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To see it going through the &lt;strong&gt;Procedure Linkage Table (PLT)&lt;/strong&gt;
in the context of lazy binding on x86_64 Linux &lt;em&gt;LIVE&lt;/em&gt;, naturally, LLDB came to my mind.
To my dismay, instead of something relevant to &lt;code&gt;puts&lt;/code&gt;
there were only these ugly and unidentifiable &lt;code&gt;___lldb_unnamed_symbol36&lt;/code&gt; in the disaseembly on LLDB 13.0.0 ðŸ« :
&lt;img alt=&#34;lldb13&#34; loading=&#34;lazy&#34; src=&#34;http://poyaoc97.github.io/img/2022-01-07-lldb/lldb13.png&#34;&gt;
In comparison, this is GDB 11.1:
&lt;img alt=&#34;gdb&#34; loading=&#34;lazy&#34; src=&#34;http://poyaoc97.github.io/img/2022-01-07-lldb/gdb.png&#34;&gt;
Let&amp;rsquo;s see how an older version of LLDB is doing.
Here&amp;rsquo;s LLDB version 12.0.1 ðŸ«¥:
&lt;img alt=&#34;lldb12&#34; loading=&#34;lazy&#34; src=&#34;http://poyaoc97.github.io/img/2022-01-07-lldb/lldb12.png&#34;&gt;
Apparently, something went wrong between the creation of LLVM version 12 and 13 release branch.
It turned out that it was
&lt;a href=&#34;https://github.com/llvm/llvm-project/commit/ec1a49170129&#34;&gt;a patch landing in July 2021&lt;/a&gt; that changed the behavior.
Someone also filed a &lt;a href=&#34;https://llvm.org/PR52702&#34;&gt;GitHub issue&lt;/a&gt; just a few days before I found this.
I then commented my findings on &lt;a href=&#34;https://reviews.llvm.org/D106837&#34;&gt;the code review page of the seemingly problematic patch&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
